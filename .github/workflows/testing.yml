name: Run tests

on:
  pull_request:
    types: [opened, reopened, synchronize]
    paths-ignore:
      - "docs/**"
  push:
    branches:
      - develop
    paths-ignore:
      - "docs/**"
      - "*.md"
  workflow_dispatch:

# Define environment variables to be used across jobs
env:
  IMG: ghcr.io/drae/templated-secret-controller
  TAG: dev

jobs:
  run-tests:
    name: e2e tests on kind
    runs-on: ubuntu-latest
    steps:
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: kinder

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set the TAG based on git describe if possible
      - name: Set TAG env
        run: |
          echo "TAG=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")" >> $GITHUB_ENV

      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.1" # Specify exact version instead of using go-version-file

      - name: Check format
        run: make fmt

      - name: Run vet
        run: make vet

      # Set up Docker BuildX with a builder that supports multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: image=moby/buildkit:buildx-stable-1

      - name: Build controller image
        run: |
          # Build the image and load it into the local docker daemon
          docker buildx build --platform=linux/amd64 \
            --load \
            --build-arg SGCTRL_VER=${TAG} \
            -t ${IMG}:${TAG} .

          # Verify the image exists locally
          docker images ${IMG}:${TAG}

      - name: Load image to Kind
        run: |
          kind load docker-image --name kinder ${IMG}:${TAG}

          # Verify the image is fully loaded and available in the Kind cluster
          echo "Verifying image availability in Kind cluster..."
          for i in {1..30}; do
            # Check if the image exists in all nodes - remove the --rm flag
            if kubectl get nodes -o=name | xargs -I{} kubectl debug {} --image=busybox --stdin -- crictl images | grep ${IMG}:${TAG}; then
              echo "Image ${IMG}:${TAG} is available in the Kind cluster"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "WARNING: Image verification timed out, but continuing anyway"
            else
              echo "Waiting for image to be available in all nodes... (attempt $i/30)"
              sleep 2
            fi
          done

      - name: Deploy CRDs
        run: |
          make manifests
          kubectl apply -f config/kustomize/base/crds/

      - name: Deploy controller
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace templated-secret-dev --dry-run=client -o yaml | kubectl apply -f -

          # Use kustomize to build the resources before applying
          kubectl kustomize config/kustomize/base | kubectl apply -f -

          # Update the deployed image to use the one we just built
          kubectl set image -n templated-secret-dev deployment/templated-secret-controller controller=${IMG}:${TAG}

          echo "=== Initial pod status after deployment ==="
          kubectl -n templated-secret-dev get pods

          # Start a background process that collects pod logs, runs even if the wait command fails
          (
            sleep 20
            echo "=== Pod status after 20 seconds ==="
            kubectl -n templated-secret-dev get pods
            
            POD_NAME=$(kubectl -n templated-secret-dev get pods -l app=templated-secret-controller -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
            if [ -n "$POD_NAME" ]; then
              echo "=== Pod details ==="
              kubectl -n templated-secret-dev describe pod $POD_NAME
              
              echo "=== Pod logs ==="
              kubectl -n templated-secret-dev logs $POD_NAME --all-containers || true
            else
              echo "No pods found with label app=templated-secret-controller"
              echo "=== All pods in namespace ==="
              kubectl -n templated-secret-dev get pods
            fi
          ) &
          DEBUG_PID=$!

          # Attempt to wait for the deployment (this might time out)
          kubectl -n templated-secret-dev wait deployment/templated-secret-controller --for=condition=Available --timeout=30s || {
            echo "Deployment timed out, checking deployment details"
            kubectl -n templated-secret describe deployment/templated-secret-controller
            
            echo "=== Events in namespace ==="
            kubectl -n templated-secret get events --sort-by='.lastTimestamp'
            
            # Wait for the background process to finish collecting logs
            wait $DEBUG_PID
            
            # Exit with a success code to continue the workflow despite the timeout
            echo "Continuing despite deployment timeout"
          }

          # Kill the background process if it's still running (if wait didn't time out)
          kill $DEBUG_PID 2>/dev/null || true
          wait $DEBUG_PID 2>/dev/null || true

      - name: Run tests
        run: |
          mkdir -p tmp
          TEMPLATEDSECRET_E2E_NAMESPACE=templated-secret-dev ./hack/test-e2e.sh
