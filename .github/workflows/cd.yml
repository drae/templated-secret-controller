name: Continuous Deployment

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write # Needed for uploading release artifacts and creating release notes
  packages: write # Needed for container registry
  id-token: write # Needed for keyless cosign signing
  security-events: write # Needed for uploading SARIF results

jobs:
  goreleaser:
    name: Release with GoReleaser
    runs-on: ubuntu-latest
    env:
      COSIGN_EXPERIMENTAL: "true"
    outputs:
      image-digest: ${{ steps.goreleaser.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.2"
          cache: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1

      - name: Clean build artifacts
        run: |
          rm -rf build/
          mkdir -p build/

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --allow-dirty --timeout 60m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ github.ref_name }}

  vulnerability-scan:
    name: Vulnerability Scan
    needs: goreleaser
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Install Grype
        uses: anchore/scan-action/download-grype@v6.1.0
        id: install-grype

      - name: Scan Image for Vulnerabilities
        uses: anchore/scan-action@v6.1.0
        id: scan
        with:
          image: "ghcr.io/${{ github.repository }}@${{ needs.goreleaser.outputs.image-digest }}"
          fail-build: false
          severity-cutoff: critical

      - name: Upload Vulnerability Report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
          category: container-scan

  generate-release-artifacts:
    name: Generate Release Artifacts
    needs: [goreleaser, vulnerability-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Image Reference
        id: image-ref
        run: |
          REPOSITORY="${{ github.repository }}"
          TAG="${{ github.ref_name }}"
          echo "image=ghcr.io/${REPOSITORY}:${TAG}" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        run: |
          PREV_TAG=$(git describe --abbrev=0 --tags --exclude="${{ github.ref_name }}" 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since ${PREV_TAG}" > release-notes.md
            echo "" >> release-notes.md
            git log --pretty=format:"* %s" ${PREV_TAG}..HEAD >> release-notes.md
          else
            echo "## Initial release" > release-notes.md
            echo "" >> release-notes.md
            git log --pretty=format:"* %s" >> release-notes.md
