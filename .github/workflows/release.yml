name: Release
on:
  push:
    tags:
      - "v*"

permissions:
  contents: write # Needed for uploading release artifacts and creating release notes
  packages: write # Needed for container registry
  id-token: write # Needed for keyless cosign signing

jobs:
  call-common:
    uses: ./.github/workflows/common.yml
    with:
      img: ghcr.io/drae/templated-secret-controller
      tag: ${{ github.ref_name }}

  goreleaser:
    name: Release with GoReleaser
    needs: call-common
    runs-on: ubuntu-latest
    env:
      COSIGN_EXPERIMENTAL: "true"
      REPOSITORY_OWNER: ${{ github.repository_owner }}
      REPOSITORY_NAME: ${{ github.event.repository.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.25.1"
          cache: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.2

      - name: Clean build artifacts
        run: |
          rm -rf build/
          mkdir -p build/

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --timeout 60m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ github.ref_name }}

  generate-release-artifacts:
    name: Generate Release Artifacts
    needs: [goreleaser]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set Image Reference
        id: image-ref
        run: |
          OWNER="${{ github.repository_owner }}"
          NAME="${{ github.event.repository.name }}"
          TAG="${{ github.ref_name }}"
          echo "image=ghcr.io/${OWNER}/${NAME}:${TAG}" >> $GITHUB_OUTPUT

  helm-publish:
    name: Publish Helm Chart
    needs: goreleaser
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      COSIGN_EXPERIMENTAL: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: "latest"

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set chart version
        id: set-version
        run: |
          CHART_PATH="./charts/templated-secret-controller"
          DEFAULT_VERSION=$(awk '/^version:/ {print $2}' "$CHART_PATH/Chart.yaml" | tr -d '"')
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "Using chart version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [[ "$VERSION" != "$DEFAULT_VERSION" ]]; then
            sed -i "s/^version: .*$/version: $VERSION/" "$CHART_PATH/Chart.yaml"
          fi

      - name: Package chart
        run: |
          CHART_PATH="./charts/templated-secret-controller"
          CHART_NAME="templated-secret-controller"
          VERSION="${{ steps.set-version.outputs.version }}"
          helm package "$CHART_PATH"
          echo "CHART_TARBALL=${CHART_NAME}-${VERSION}.tgz" >> $GITHUB_ENV

      - name: Push chart to OCI registry
        run: |
          helm push "$CHART_TARBALL" oci://ghcr.io/${{ github.repository_owner }}/charts

      - name: Sign Helm chart with Cosign
        run: |
          CHART_REF="ghcr.io/${{ github.repository_owner }}/charts/templated-secret-controller:${{ steps.set-version.outputs.version }}"
          cosign sign --yes "$CHART_REF"

      - name: Output installation instructions
        run: |
          VERSION="${{ steps.set-version.outputs.version }}"
          CHART_REF="ghcr.io/${{ github.repository_owner }}/charts/templated-secret-controller:$VERSION"
          echo "::notice::Chart published successfully! To install, run:"
          echo "::notice::helm install templated-secret-controller oci://$CHART_REF"
          echo "::notice::To verify the chart signature with Cosign, run:"
          echo "::notice::cosign verify $CHART_REF"
