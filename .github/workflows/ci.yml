name: Continuous Integration
on:
  pull_request:
    types: [opened, reopened, synchronize]
    paths-ignore:
      - "docs/**"
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "*.md"
  workflow_dispatch:

env:
  IMG: ghcr.io/drae/templated-secret-controller
  TAG: dev

jobs:
  setup:
    name: Build docker image
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set TAG env
        id: set-tag
        run: |
          TAG=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "TAG=${TAG}" >> $GITHUB_ENV

      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Build controller binary
        run: |
          CGO_ENABLED=0 go build -o templated-secret-controller \
            -ldflags "-s -w -X github.com/drae/templated-secret-controller/cmd/controller.Version=${TAG}" \
            ./cmd/controller/main.go

      # Build Docker image in the setup job
      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: |
            SGCTRL_VER=${{ env.TAG }}
          tags: ${{ env.IMG }}:${{ env.TAG }}
          load: true

      # Save Docker image as a tarball
      - name: Save Docker image
        run: |
          mkdir -p /tmp/docker-image
          docker save ${IMG}:${TAG} -o /tmp/docker-image/image.tar

      # Upload Docker image as an artifact
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/docker-image/image.tar
          retention-days: 1

  controller-test:
    name: Controller testing
    runs-on: ubuntu-latest
    needs: setup
    env:
      TAG: ${{ needs.setup.outputs.tag }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Run unit tests with coverage
        run: |
          go test ./... -coverprofile cover.txt
          go tool cover -func=cover.txt

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./cover.txt
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: kinder

      - name: Set up Helm
        uses: azure/setup-helm@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Download and load the Docker image
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp/docker-image

      - name: Load Docker image
        run: |
          docker load -i /tmp/docker-image/image.tar

      - name: Load image to Kind
        run: kind load docker-image --name kinder ${IMG}:${TAG}

      - name: Deploy controller with Helm
        run: |
          kubectl create namespace templated-secret --dry-run=client -o yaml | kubectl apply -f -
          helm install templated-secret-controller charts/templated-secret-controller \
            --set image.repository=${IMG} \
            --set image.tag=${TAG} \
            --set image.pullPolicy=IfNotPresent \
            --namespace templated-secret
          kubectl -n templated-secret wait --for=condition=available \
            deployment -l app.kubernetes.io/name=templated-secret-controller --timeout=60s

      - name: Run integration tests
        uses: n8maninger/action-golang-test@v2
        with:
          package: ./test/ci/
          args: -tags=integration ./test/ci/... -timeout 10m
        env:
          NAMESPACE: templated-secret

  helm-test:
    name: Helm chart test
    runs-on: ubuntu-latest
    needs: setup
    env:
      TAG: ${{ needs.setup.outputs.tag }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: kinder

      # Download and load the Docker image
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp/docker-image

      - name: Load Docker image
        run: |
          docker load -i /tmp/docker-image/image.tar

      - name: Load image to Kind
        run: kind load docker-image --name kinder ${IMG}:${TAG}

      - name: Set up Helm
        uses: azure/setup-helm@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Helm chart
        run: |
          # Create namespace and deploy
          kubectl create namespace templated-secret --dry-run=client -o yaml | kubectl apply -f -
          helm install templated-secret-controller charts/templated-secret-controller \
            --set image.repository=${IMG} \
            --set image.tag=${TAG} \
            --set image.pullPolicy=IfNotPresent \
            --namespace templated-secret
          kubectl -n templated-secret wait --for=condition=available \
            deployment -l app.kubernetes.io/name=templated-secret-controller --timeout=60s

          # Apply example resources and verify
          kubectl -n templated-secret apply -f examples/
          kubectl wait --for=condition=established --timeout=30s crd/secrettemplates.templatedsecret.starstreak.dev

          # Simple check for secret creation
          for i in {1..6}; do
            if kubectl -n templated-secret get secrets -o json | jq '.items[] | select(.metadata.ownerReferences != null) | select(.metadata.ownerReferences[].kind == "SecretTemplate")' | grep -q "secret-"; then
              echo "✅ Secrets created successfully"
              break
            fi
            if [ $i -eq 6 ]; then
              echo "❌ Timed out waiting for secrets"
              exit 1
            fi
            sleep 5
          done

          # Test upgrade and uninstall
          helm upgrade templated-secret-controller charts/templated-secret-controller \
            --set image.repository=${IMG} \
            --set image.tag=${TAG} \
            --set image.pullPolicy=IfNotPresent \
            --namespace templated-secret

          helm uninstall templated-secret-controller --namespace templated-secret
          kubectl get crd secrettemplates.templatedsecret.starstreak.dev
